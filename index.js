const { Client, GatewayIntentBits, Collection } = require('discord.js');
const { QuickDB } = require('quick.db');
const path = require('path');
const fs = require('fs');

console.log('üöÄ Starting Discord Bank Bot...');

// Initialize database
const db = new QuickDB();
console.log('‚úÖ Database initialized');

// Bot configuration
const config = {
    prefix: '',
    embedColor: '#0099ff',
    cooldowns: {
        default: 30000, // 30 seconds
        dice: 30000,
        salary: 3600000, // 1 hour
        daily: 86400000 // 24 hours
    }
};

// Get token from environment
const token = process.env.DISCORD_TOKEN;
if (!token) {
    console.error('‚ùå DISCORD_TOKEN not found in environment variables!');
    console.log('Please add DISCORD_TOKEN to your Railway environment variables');
    process.exit(1);
}

// Create Discord client
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// Commands collection
client.commands = new Collection();
const cooldowns = new Collection();

// Utility function for cooldowns
function checkCooldown(userId, commandName, cooldownTime) {
    if (!cooldowns.has(commandName)) {
        cooldowns.set(commandName, new Collection());
    }
    
    const now = Date.now();
    const timestamps = cooldowns.get(commandName);
    
    if (timestamps.has(userId)) {
        const expirationTime = timestamps.get(userId) + cooldownTime;
        
        if (now < expirationTime) {
            const timeLeft = (expirationTime - now) / 1000;
            return Math.ceil(timeLeft);
        }
    }
    
    timestamps.set(userId, now);
    setTimeout(() => timestamps.delete(userId), cooldownTime);
    return null;
}

// Load commands
function loadCommands() {
    const commandsPath = path.join(__dirname, 'src', 'commands');
    
    if (!fs.existsSync(commandsPath)) {
        console.log('‚ö†Ô∏è Commands directory not found, creating basic commands...');
        return false;
    }
    
    try {
        const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
        
        for (const file of commandFiles) {
            try {
                const filePath = path.join(commandsPath, file);
                const command = require(filePath);
                
                if ('data' in command && 'execute' in command) {
                    client.commands.set(command.data.name, command);
                    console.log(`‚úÖ Loaded command: ${command.data.name}`);
                } else {
                    console.log(`‚ö†Ô∏è Skipping ${file}: missing required properties`);
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è Could not load command ${file}:`, error.message);
            }
        }
        return true;
    } catch (error) {
        console.error('‚ùå Error loading commands:', error.message);
        return false;
    }
}

// Basic commands if file loading fails
const basicCommands = {
    'ÿ±ÿßÿ™ÿ®': async (message) => {
        const cooldownLeft = checkCooldown(message.author.id, 'salary', config.cooldowns.salary);
        if (cooldownLeft) {
            return message.reply(`‚è∞ Ÿäÿ¨ÿ® ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ${Math.ceil(cooldownLeft / 60)} ÿØŸÇŸäŸÇÿ© ŸÇÿ®ŸÑ ÿ£ÿÆÿ∞ ÿßŸÑÿ±ÿßÿ™ÿ® ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ`);
        }
        
        const salary = Math.floor(Math.random() * 1000) + 500;
        const currentBalance = await db.get(\`balance_\${message.author.id}\`) || 0;
        await db.set(\`balance_\${message.author.id}\`, currentBalance + salary);
        
        message.reply(\`üí∞ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© **\${salary}** ÿ∞Ÿáÿ® ÿ•ŸÑŸâ ÿ±ÿµŸäÿØŸÉ!\`);
    },
    
    'ŸÅŸÑŸàÿ≥Ÿä': async (message) => {
        const balance = await db.get(\`balance_\${message.author.id}\`) || 0;
        message.reply(\`üí≥ ÿ±ÿµŸäÿØŸÉ ÿßŸÑÿ≠ÿßŸÑŸä: **\${balance}** ÿ∞Ÿáÿ®\`);
    },
    
    'ÿßŸàÿßŸÖÿ±': async (message) => {
        const embed = {
            color: parseInt(config.embedColor.replace('#', ''), 16),
            title: 'üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ£ŸàÿßŸÖÿ±',
            description: '**ÿßŸÑÿ£ŸàÿßŸÖÿ± ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©:**\\n\\n' +
                        'üí∞ `ÿ±ÿßÿ™ÿ®` - ÿßÿ≠ÿµŸÑ ÿπŸÑŸâ ÿ±ÿßÿ™ÿ®ŸÉ\\n' +
                        'üí≥ `ŸÅŸÑŸàÿ≥Ÿä` - ÿßÿπÿ±ÿ∂ ÿ±ÿµŸäÿØŸÉ\\n' +
                        'üé≤ `ŸÜÿ±ÿØ` - ÿßŸÑÿπÿ® ÿßŸÑŸÜÿ±ÿØ\\n' +
                        'üìã `ÿßŸàÿßŸÖÿ±` - ÿπÿ±ÿ∂ Ÿáÿ∞Ÿá ÿßŸÑŸÇÿßÿ¶ŸÖÿ©',
            timestamp: new Date(),
            footer: { text: 'Discord Bank Bot' }
        };
        
        message.reply({ embeds: [embed] });
    },
    
    'ŸÜÿ±ÿØ': async (message) => {
        const cooldownLeft = checkCooldown(message.author.id, 'dice', config.cooldowns.dice);
        if (cooldownLeft) {
            return message.reply(\`‚è∞ Ÿäÿ¨ÿ® ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± \${cooldownLeft} ÿ´ÿßŸÜŸäÿ© ŸÇÿ®ŸÑ ŸÑÿπÿ® ÿßŸÑŸÜÿ±ÿØ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ\`);
        }
        
        const playerRoll = Math.floor(Math.random() * 6) + 1;
        const botRoll = Math.floor(Math.random() * 6) + 1;
        
        let result = '';
        let winnings = 0;
        
        if (playerRoll > botRoll) {
            winnings = 100;
            result = 'üéâ ŸÑŸÇÿØ ÿ±ÿ®ÿ≠ÿ™!';
            const currentBalance = await db.get(\`balance_\${message.author.id}\`) || 0;
            await db.set(\`balance_\${message.author.id}\`, currentBalance + winnings);
        } else if (playerRoll < botRoll) {
            result = 'üò¢ ŸÑŸÇÿØ ÿÆÿ≥ÿ±ÿ™!';
        } else {
            result = 'ü§ù ÿ™ÿπÿßÿØŸÑ!';
        }
        
        const embed = {
            color: parseInt(config.embedColor.replace('#', ''), 16),
            title: 'üé≤ ŸÑÿπÿ®ÿ© ÿßŸÑŸÜÿ±ÿØ',
            fields: [
                { name: 'üéØ ŸÜÿ±ÿØŸÉ', value: \`**\${playerRoll}**\`, inline: true },
                { name: 'ü§ñ ŸÜÿ±ÿØ ÿßŸÑÿ®Ÿàÿ™', value: \`**\${botRoll}**\`, inline: true },
                { name: 'üèÜ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©', value: result + (winnings > 0 ? \` (+\${winnings} ÿ∞Ÿáÿ®)\` : ''), inline: false }
            ],
            timestamp: new Date(),
            footer: { text: 'Discord Bank Bot' }
        };
        
        message.reply({ embeds: [embed] });
    }
};

// Client events
client.once('ready', () => {
    console.log(\`ü§ñ Bot is Ready! \${client.user.tag}!\`);
    console.log(\`üöÄ Enhanced with Railway hosting and improved dice command!\`);
    
    // Try to load commands from files
    const commandsLoaded = loadCommands();
    if (!commandsLoaded) {
        console.log('üì¶ Using built-in basic commands');
    }
    
    // Set bot status
    client.user.setActivity('ÿ±ÿßÿ™ÿ® | ŸÅŸÑŸàÿ≥Ÿä | ŸÜÿ±ÿØ', { type: 'PLAYING' });
});

client.on('messageCreate', async (message) => {
    // Ignore bots and non-text channels
    if (message.author.bot || !message.guild) return;
    
    const content = message.content.trim();
    if (!content) return;
    
    try {
        // Check if it's a command we recognize
        if (basicCommands[content]) {
            await basicCommands[content](message);
            return;
        }
        
        // Try loaded commands
        const command = client.commands.get(content);
        if (command) {
            await command.execute(message, db);
        }
        
    } catch (error) {
        console.error('‚ùå Command execution error:', error);
        message.reply('ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ£ŸÖÿ±!').catch(() => {});
    }
});

// Error handling
client.on('error', (error) => {
    console.error('Discord client error:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('Unhandled promise rejection:', error);
});

// Login
client.login(token).catch((error) => {
    console.error('‚ùå Failed to login to Discord:', error);
    process.exit(1);
});
